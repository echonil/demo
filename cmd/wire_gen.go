// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	controllers3 "github.com/clevergo/demo/internal/api/controllers"
	controllers2 "github.com/clevergo/demo/internal/backend/controllers"
	"github.com/clevergo/demo/internal/frontend/controllers"
	"github.com/clevergo/demo/internal/web"
	"github.com/clevergo/demo/pkg/access"
	"github.com/google/wire"
)

import (
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func initializeServer() (*web.Server, func(), error) {
	logger, cleanup, err := provideLogger()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := provideDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	viewManager := provideView()
	store := provideSessionStore()
	sessionManager := provideSessionManager(store)
	identityStore := provideIdentityStore(db)
	manager := provideUserManager(identityStore, sessionManager)
	dialer := provideMailer()
	captchasManager := provideCaptchaManager()
	enforcer, err := provideEnforcer()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accessManager := access.New(enforcer, manager)
	application := provideApp(logger, db, viewManager, sessionManager, manager, dialer, captchasManager, accessManager)
	site := controllers.NewSite(application)
	cmdFrontendRoutes := provideFrontendRoutes(site)
	backendView := provideBackendView(logger)
	backendApplication := provideBackendApp(logger, db, backendView, sessionManager, manager, dialer, captchasManager, accessManager)
	controllersSite := controllers2.NewSite(backendApplication)
	post := controllers2.NewPost(backendApplication)
	client, err := provideTencentClient()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	captcha := provideTencentCaptcha(client)
	user := controllers2.NewUser(backendApplication, captcha)
	cmdBackendRoutes := provideBackendRoutes(accessManager, controllersSite, post, user)
	router := provideRouter(application, cmdFrontendRoutes, backendApplication, cmdBackendRoutes)
	translators, err := provideI18N()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v, err := provideMiddlewares(sessionManager, translators, manager)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server := provideServer(router, logger, v)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

func initializeAPIServer() (*web.Server, func(), error) {
	logger, cleanup, err := provideLogger()
	if err != nil {
		return nil, nil, err
	}
	enforcer, err := provideEnforcer()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup2, err := provideDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	identityStore := provideIdentityStore(db)
	store := provideSessionStore()
	sessionManager := provideSessionManager(store)
	manager := provideUserManager(identityStore, sessionManager)
	accessManager := access.New(enforcer, manager)
	cmdApiUserManager := provideAPIUserManager(identityStore)
	dialer := provideMailer()
	captchasManager := provideCaptchaManager()
	application := provideAPIApp(logger, db, sessionManager, cmdApiUserManager, dialer, captchasManager, accessManager)
	post := controllers3.NewPost(application)
	user := controllers3.NewUser(application)
	captcha := controllers3.NewCaptcha(captchasManager)
	cmdApiRouteGroups := provideAPIRouteGroups(accessManager, post, user, captcha)
	server := provideAPIServer(logger, cmdApiRouteGroups)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var superSet = wire.NewSet(
	provideRouter, provideMiddlewares, provideI18N,
	provideLogger, provideDB, provideSessionManager, provideSessionStore, provideUserManager,
	provideIdentityStore, provideMailer, provideCaptchaManager,
	provideEnforcer, access.New, provideTencentClient, provideTencentCaptcha,
)

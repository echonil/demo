// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	controllers3 "github.com/clevergo/demo/internal/api/controllers"
	controllers2 "github.com/clevergo/demo/internal/controllers"
	"github.com/clevergo/demo/internal/core"
	"github.com/clevergo/demo/internal/frontend/controllers"
	"github.com/clevergo/demo/pkg/access"
	"github.com/google/wire"

	_ "github.com/go-sql-driver/mysql"

	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func initializeServer() (*core.Server, func(), error) {
	logConfig := provideLogConfig()
	logger, cleanup, err := core.NewLogger(logConfig)
	if err != nil {
		return nil, nil, err
	}
	dbConfig := provideDBConfig()
	db, cleanup2, err := core.NewDB(dbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	viewManager := provideView()
	sessionConfig := provideSessionConfig()
	redisConfig := provideRedisConfig()
	store := core.NewSessionStore(redisConfig)
	sessionManager := core.NewSessionManager(sessionConfig, store)
	identityStore := core.NewIdentityStore(db)
	manager := core.NewUserManager(identityStore, sessionManager)
	mailerConfig := provideMailerConfig()
	dialer := core.NewMailer(mailerConfig)
	captchaConfig := provideCaptchaConfig()
	captchasStore := core.NewCaptchaStore(redisConfig)
	captchasManager := core.NewCaptchaManager(captchaConfig, captchasStore)
	enforcer, err := core.NewEnforcer(dbConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	accessManager := access.New(enforcer, manager)
	application := provideApp(logger, db, viewManager, sessionManager, manager, dialer, captchasManager, accessManager)
	site := controllers.NewSite(application)
	captcha := controllers2.NewCaptcha(captchasManager)
	user := controllers.NewUser(application)
	cmdFrontendRoutes := provideFrontendRoutes(site, captcha, user)
	csrfConfig := provideCSRFConfig()
	csrfMiddleware := core.NewCSRFMiddleware(csrfConfig)
	i18NConfig := provideI18NConfig()
	i18nStore := core.NewFileStore(i18NConfig)
	translators, err := core.NewI18N(i18NConfig, i18nStore)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v := core.NewI18NLanguageParsers(i18NConfig)
	i18NMiddleware := core.NewI18NMiddleware(translators, v)
	gzipMiddleware := core.NewGzipMiddleware()
	sessionMiddleware := core.NewSessionMiddleware(sessionManager)
	m := core.NewMinify()
	minifyMiddleware := core.NewMinifyMiddleware(m)
	loggingMiddleware := core.NewLoggingMiddleware()
	router := provideRouter(application, cmdFrontendRoutes, csrfMiddleware, i18NMiddleware, gzipMiddleware, sessionMiddleware, minifyMiddleware, loggingMiddleware)
	server := provideServer(router, logger, m)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

func initializeAPIServer() (*core.Server, func(), error) {
	logConfig := provideLogConfig()
	logger, cleanup, err := core.NewLogger(logConfig)
	if err != nil {
		return nil, nil, err
	}
	dbConfig := provideDBConfig()
	enforcer, err := core.NewEnforcer(dbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup2, err := core.NewDB(dbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	identityStore := core.NewIdentityStore(db)
	sessionConfig := provideSessionConfig()
	redisConfig := provideRedisConfig()
	store := core.NewSessionStore(redisConfig)
	sessionManager := core.NewSessionManager(sessionConfig, store)
	manager := core.NewUserManager(identityStore, sessionManager)
	accessManager := access.New(enforcer, manager)
	cmdApiUserManager := provideAPIUserManager(identityStore)
	mailerConfig := provideMailerConfig()
	dialer := core.NewMailer(mailerConfig)
	captchaConfig := provideCaptchaConfig()
	captchasStore := core.NewCaptchaStore(redisConfig)
	captchasManager := core.NewCaptchaManager(captchaConfig, captchasStore)
	application := provideAPIApp(logger, db, sessionManager, cmdApiUserManager, dialer, captchasManager, accessManager)
	post := controllers3.NewPost(application)
	user := controllers3.NewUser(application)
	captcha := controllers2.NewCaptcha(captchasManager)
	cmdApiRouteGroups := provideAPIRouteGroups(accessManager, post, user, captcha)
	authenticator := core.NewAuthenticator(identityStore)
	corsConfig := provideCORSConfig()
	corsMiddleware := core.NewCORSMiddleware(corsConfig)
	server := provideAPIServer(logger, cmdApiRouteGroups, cmdApiUserManager, authenticator, corsMiddleware)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var superSet = wire.NewSet(
	configSet, core.NewDB, core.NewSessionStore, core.NewSessionManager, core.NewMailer, core.NewLogger, core.NewAuthenticator, core.NewIdentityStore, core.NewUserManager, core.NewCaptchaStore, core.NewCaptchaManager, core.NewI18N, core.NewFileStore, core.NewI18NLanguageParsers, provideRouter, core.NewEnforcer, access.New, controllers2.NewCaptcha, core.MiddlewareSet,
)
